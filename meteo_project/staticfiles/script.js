// script.js

document.addEventListener('DOMContentLoaded', () => {
    const input = document.getElementById('city-input');
    const suggestionsList = document.getElementById('suggestions');
    const historyList = document.getElementById('history-list');
    const weatherResult = document.getElementById('weather-result');
    const themeToggle = document.getElementById('theme-toggle');
    let map = null;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        themeToggle.textContent = document.body.classList.contains('dark-theme') ? '‚òÄÔ∏è' : 'üåô';
    });

    // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    input.addEventListener('input', async () => {
        const query = input.value.trim();
        if (query.length < 2) {
            suggestionsList.style.display = 'none';
            return;
        }

        try {
            const res = await fetch(`/api/cities/?q=${encodeURIComponent(query)}`);
            const data = await res.json();

            suggestionsList.innerHTML = '';
            data.forEach(item => {
                const li = document.createElement('li');
                li.textContent = `${item.name}, ${item.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞'}`;
                li.addEventListener('click', () => {
                    input.value = item.name;
                    suggestionsList.style.display = 'none';
                    getWeather(item.name);
                });
                suggestionsList.appendChild(li);
            });

            suggestionsList.style.display = data.length > 0 ? 'block' : 'none';
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫:", err);
        }
    });

    // –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π
    async function loadHistory() {
        try {
            const res = await fetch('/api/history/');
            const data = await res.json();

            historyList.innerHTML = '';
            data.forEach(item => {
                const div = document.createElement('div');
                div.className = 'history-item';
                div.textContent = item.city;
                div.addEventListener('click', () => getWeather(item.city));
                historyList.appendChild(div);
            });
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
    async function getWeather(city) {
        try {
            const res = await fetch(`/api/weather/?city=${encodeURIComponent(city)}`);
            const data = await res.json();

            if (data.error) {
                weatherResult.innerHTML = `<p class="error">${data.error}</p>`;
                return;
            }

            const cityName = city;
            const lat = data.latitude;
            const lon = data.longitude;

            // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ä—Ç—ã
            if (map) {
                map.remove();
                map = null;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç—ã
            const mapDiv = document.createElement('div');
            mapDiv.id = 'map';
            mapDiv.style.height = '300px';
            mapDiv.style.marginTop = '20px';

            weatherResult.innerHTML = `
                <h2>${cityName}</h2>
                <div class="temperature">${data.current.temperature_2m}¬∞C</div>
                <ul>
                    <li><span class="icon">üíß</span> –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${data.hourly.relative_humidity_2m[0]}%</li>
                    <li><span class="icon"><img src="/static/icons/wind.svg" alt="wind" width="20"></span> –í–µ—Ç–µ—Ä: ${data.current.wind_speed_10m} –∫–º/—á</li>
                    <li><span class="icon">üìä</span> –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: ${data.current.apparent_temperature || '?'} –∫–ü–∞</li>
                    <li><span class="icon">üåÖ</span> –£–§-–∏–Ω–¥–µ–∫—Å: –°—Ä–µ–¥–Ω–∏–π</li>
                </ul>

                <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã</h3>
                <div class="forecast-carousel"></div>

                <h3>–ö–∞—Ä—Ç–∞</h3>
            `;
            weatherResult.appendChild(mapDiv);

            // –ö–∞—Ä—Ç–∞
            map = L.map('map').setView([lat, lon], 10);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);
            L.marker([lat, lon]).addTo(map);

            // –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —á–∞—Å–∞–º
            const forecastContainer = document.querySelector('.forecast-carousel');
            forecastContainer.innerHTML = '';

            for (let i = 0; i < 6 && i < data.hourly.time.length; i++) {
                const time = new Date(data.hourly.time[i]).toLocaleTimeString([], { hour: '2-digit' });
                const temp = data.hourly.temperature_2m[i];

                const card = document.createElement('div');
                card.className = 'forecast-day';
                card.innerHTML = `
                    <div class="time">${time}</div>
                    <div class="temp">${temp}¬∞C</div>
                `;
                forecastContainer.appendChild(card);
            }

        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:", err);
            weatherResult.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ</p>';
        }
    }

    loadHistory();
});